#include<iostream>
#include<string>
#include<vector> 
#include<exception>
using namespace std;

class people
{
  
	private:
	string name;
	string age;
	string mobile;
	string address;

	public:
	people(string names,string ages,string mobiles,string addresss):
		name(names),age(ages),mobile(mobiles),address(addresss){
		
	}
	string getName()
	{
		return name;
	}
	void show()
	{
		string s="\""+name+"\" : {\"age\":"+age+",\"mobile\":\""+mobile+"\",\"address\":\""+address+"\"}";
		cout<<s<<endl;
	}

};
class entries
{
	private:
	vector<people> members;
	string name;
	public:
	entries(string names):name(names){
		
	}
	string getName()
	{
		return name;
	}
	void addMembers(people p1)
	{
		members.push_back(p1);
	}
	void removeMember(string names)
	{
		vector<people>::iterator temp;
		for(vector<people>::iterator it=members.begin();it!=members.end();it++)
		{
			if((*it).getName()==names)
				temp=it;
			
		}
		members.erase(temp);
	}
	people returnMember(string names)
	{
		for(vector<people>::iterator it=members.begin();it!=members.end();it++)
		{
			if(names==(*it).getName())
			{
				return (*it);
			}
		}
	}
	
	void ShowMemberName()
	{
		bool first=true;
		for(vector<people>::iterator it=members.begin();it!=members.end();it++)
		{
			if(!first)
			cout<<" ";
			else
			{
				first=false;
			}
			cout<<(*it).getName();
		}
		cout<<endl;
	}
};
void showList(int deep,string currentPos,vector<entries>::iterator beg,vector<entries>::iterator end)
{
	if(deep==0)
	{
	while(beg!=end)
	{
		cout<<(*beg).getName()<<endl;
		beg++;
	}
	}
	else if(deep==1)
	{
		while((*beg).getName()!=currentPos&&beg!=end)
		{
			beg++;
		}
		if((*beg).getName()==currentPos)
		{
			(*beg).ShowMemberName();
		}
	}
}

void showCat(int deep,string currentPos,string name,vector<entries>::iterator beg,vector<entries>::iterator end)
{
	vector<entries>::iterator temp=beg;
	while(beg!=end&&(*beg).getName()!=currentPos)
	{
		beg++;	
	}
	if((*beg).getName()!=currentPos)
		beg=temp;
	people p1=(*beg).returnMember(name);
	
	p1.show();
}
void showAdd(int deep,string currentPos,vector<entries>::iterator beg,vector<entries>::iterator end)
{	string names,values;
	cout<<"key:";
	cin>>names;
	
	cout<<"value:";
	getline(cin,values);
	getline(cin,values);
	cout<<values<<endl;
	string snew="";
	string temps;
	/*
for(int i=0;i<values.length();i++)
	{	
		temps=values.substr(i,1);
		
		if(" "==temps)
		{
			snew+=temps;
		}
	}
	values=snew;*/
	const char* newvalue=values.c_str();
	int startPos[3];
	int pStart=0;
	int endPos[3];
	endPos[2]=values.length();
	int pEnd=0;
	for(int i=0;i<values.length();i++)
	{
		if(':'==newvalue[i])
			startPos[pStart++]=i;
		else if(','==newvalue[i])
			endPos[pEnd++]=i;
			else if('}'==newvalue[i])
			endPos[2]=i;
	}
	string age=values.substr(startPos[0]+1,endPos[0]-startPos[0]-1);
	string mobile=values.substr(startPos[1]+2,endPos[1]-startPos[1]-3);
	string address=values.substr(startPos[2]+2,endPos[2]-startPos[2]-3);
	cout<<age<<endl;
	cout<<mobile<<endl;
	cout<<address<<endl;
		vector<entries>::iterator temp=beg;
	while(beg!=end&&(*beg).getName()!=currentPos)
	{
		beg++;	
	}
	if((*beg).getName()!=currentPos)
		beg=temp;
		people p1(names,age,mobile,address);
	(*beg).addMembers(p1);
	cout<<"address entry added"<<endl;
		
}
void showRemove(int deep,string currentPos,vector<entries>::iterator beg,vector<entries>::iterator end)
{
	string removeName;
	cout<<"please give the key:";
	cin>>removeName;
	while(beg!=end&&currentPos!=(*beg).getName())
	{
		beg++;
	}
	if((*beg).getName()==currentPos)
	{
		((*beg).removeMember(removeName));
		cout<<removeName<<" was deleted from JSON"<<endl;
	}
	else
	{
		cout<<"no item named "<<removeName<<endl;
	}
}
void showHelp()
{
	cout<<"help you!help me!"<<endl;
} 
int main()
{	
	vector<entries> entryVect;
	people p1("lilei","27","137000000000","Earth somewhere");
	people p2("hanmeimei","26","13700000001","Earth somewhere else");
	entries entry("entries");
	
	entry.addMembers(p1);
	entry.addMembers(p2);
	entryVect.push_back(entry);
	string command;
	string currentPostion="";
	int deeps=0;
	string commandType,commandName=""; 
	while(getline(cin,command))
	{
		int token=0;//预处理command 
		int _pos=command.find(" ");
		if(_pos!=command.npos)
		{
			token=1;
			commandType=command.substr(0,_pos);
			commandName=command.substr(_pos+1,command.length()-1);
		
		}
		else
		{
			commandType=command;
		}
		int commandLine=0;
		if(commandType=="ls")
		commandLine=1;
		else if(commandType=="cd")
		commandLine=2;
		else if(commandType=="cat")
		commandLine=3;
		else if(commandType=="add")
		commandLine=4;
		else if(commandType=="remove")
		commandLine=5;
		else if(commandType=="!help")
		commandLine=6;
		else if(commandType=="!quit")
		commandLine=7;
		switch(commandLine)
		{
			case 1:
				try{
					showList(deeps,currentPostion,entryVect.begin(),entryVect.end());
				break;
				}catch(exception err)
				{
					showHelp();break;
				}
				
			case 2:
				try{
					currentPostion=commandName;
				deeps++;
				break;
				}catch(exception err)
				{
					showHelp();break;
				}
			
			case 3:
				try{
					showCat(deeps,currentPostion,commandName,entryVect.begin(),entryVect.end());break;
				}catch(exception err)
				{
					showHelp();break;
				}
			case 4:
				try{
					showAdd(deeps,currentPostion,entryVect.begin(),entryVect.end());break;
				}catch(exception err)
				{
					showHelp();break;
				}
				
			case 5:
				try{
					showRemove(deeps,currentPostion,entryVect.begin(),entryVect.end());break;
				}catch(exception err)
				{
					showHelp();break;
				}
				
			case 6:
				showHelp();break;
			case 7:
				exit(0);break;
			default:
				showHelp();
		}
	}
	
}
